#!/usr/bin/env python3# -*- coding: utf-8 -*-import re, sys, io, locale, osfrom datetime import datetime, timedeltafrom sqlalchemy import create_enginefrom sqlalchemy.orm import *from lib import UTM, ORMengine = create_engine("mysql+pymysql://progress:progress@10.8.16.18:3306/progress?charset=utf8mb4")session = Session(bind=engine)def notification_message(message, filename):    with io.open(filename, 'w+', encoding='utf-8') as not_accept_file:        print(message)        not_accept_file.write(message)def not_accept_ttn(port):    utm = UTM.UTM(port=port)    acceptedTTNs = utm.get_accepted_ttn()    NOTIFICATION_DIRECTION = "/root/notifications"    notAcceptTTNs = utm.not_accepted_ttn()    if os.path.exists(NOTIFICATION_DIRECTION):        os.chdir(NOTIFICATION_DIRECTION)        notification_files = os.listdir()    else:        print("Нету папки " + NOTIFICATION_DIRECTION)        exit()    if not notAcceptTTNs:        for file in notification_files:            if re.findall('not_accept_', file):                print("Удалил " + os.path.join(NOTIFICATION_DIRECTION, file))                os.remove(os.path.join(NOTIFICATION_DIRECTION, file))    for notAcceptTTN in notAcceptTTNs:        TTN = notAcceptTTN[0]        ttnNumber = notAcceptTTN[1]        date = notAcceptTTN[2]        shipperFsrar = notAcceptTTN[3]        count_notAccept_file = 0        for file in notification_files:            if notAcceptTTN[0] in acceptedTTNs:                if os.path.exists(os.path.join(NOTIFICATION_DIRECTION, 'not_accept_' + TTN)):                    os.remove(os.path.join(NOTIFICATION_DIRECTION, 'not_accept_' + TTN))                    print("Удалил " + os.path.join(NOTIFICATION_DIRECTION, 'not_accept_' + TTN))                    continue        if not os.path.exists(os.path.join(NOTIFICATION_DIRECTION, 'not_accept_' + TTN)):            shipper = session.query(ORM.Shippers).filter(ORM.Shippers.fsrar == shipperFsrar).first()            message = "Есть не принятая накладная {0} {1} {2}".format(shipper.name, ttnNumber, date)            notification_message(message, os.path.join(NOTIFICATION_DIRECTION, 'not_accept_' + TTN))def expires_rutoken(port):    utm = UTM.UTM(port=port)    NOTIFICATION_DIRECTION = "/root/notifications"    os.chdir(NOTIFICATION_DIRECTION)    rutoken = utm.get_date_rutoken()    name = utm.get_name_rutoken()    filename = os.path.join(NOTIFICATION_DIRECTION, "expires_rutoken_" + port)    if datetime.now() > rutoken - timedelta(days=31):        month = datetime.strftime(rutoken, "%B")        if month[-1] == "ь" or month[-1] == "й":            month = month[:-1] + "я"        elif month[-1] == "т":            month = month[:-1] + "та"        message = "{0} {1} {2} года выходит срок действия ЭЦП ЕГАИС {3}".format(            datetime.strftime(rutoken, "%d"), month, datetime.strftime(rutoken, "%Y"), name)        notification_message(message, filename)    else:        print("Срок действия рутокена больше 30 дней '" + datetime.strftime(rutoken, "%Y-%m-%d") + "' Порт '" + port + "'")        if os.path.exists("expires_rutoken_" + port):            os.remove(os.path.join(filename))def main(port):    inn = [re.findall('[0-9]+', line) for line in open('/linuxcash/cash/conf/ncash.ini', 'r') if re.match('inn', line)][0][0]    locale.setlocale(locale.LC_ALL, "ru_RU.utf8")    expires_rutoken(port)    not_accept_ttn(port)if len(sys.argv) == 2:    main(sys.argv[1])else:    print("Укажите один аргумент в виде порта УТМ. Например .../notification.py 18082")